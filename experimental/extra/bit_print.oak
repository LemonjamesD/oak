link!("extra/bit_print.o");

let bit_print_internal(what: ^void, size: u128) -> void;
let hex_print_internal(what: ^void, size: u128) -> void;
let char_print_internal(what: ^void, size: u128) -> void;
let hex_dump_internal(what: ^void, size: u128) -> void;

let bit_print<t>(what: ^t) -> void
{
    let ptr: ^void;
    let size: u128;

    ptrcpy!(ptr, what);
    size = size!(^what);

    bit_print_internal(ptr, size);
}

let hex_print<t>(what: ^t) -> void
{
    let ptr: ^void;
    let size: u128;

    ptrcpy!(ptr, what);
    size = size!(^what);

    hex_print_internal(ptr, size);
}

let char_print<t>(what: ^t) -> void
{
    let ptr: ^void;
    let size: u128;

    ptrcpy!(ptr, what);
    size = size!(^what);

    char_print_internal(ptr, size);
}

let hex_dump<t>(what: ^t) -> void
{
    let ptr: ^void;
    let size: u128;

    ptrcpy!(ptr, what);
    size = size!(^what);

    hex_dump_internal(ptr, size);
}

