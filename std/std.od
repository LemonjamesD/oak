// The standard Oak dialect
// These rules can also be activated via std.oak
// Jordan Dehmel, 2023

// Remove all existing rules
clear

// Access rules
"$[$;$^$@$,$[$]$($)${$}$] $*p [ $*a ]"      "; $p . Get ( $a )"

// Namespace rule
"$a :: $b"                                  "$a $< _ $< $b"

// Void return rule
"let $a ( $*b ) {"                          "let $a ( $b ) -> void {"

// Auto-parenthesize rules
"if $*a {"                                  "if ( $a ) {"
"while $*a {"                               "while ( $a ) {"
"match $*a {"                               "match ( $a ) {"

// Method rules
"let $a . $b ( )"                           "let $b ( self : ^ $a )"
"let $a . $b ("                             "let $b ( self : ^ $a ,"
"$/<$let $a . $b ( )"                       "$b ( $a )"
"$/<$let $a . $b ("                         "$b ( $a ,"

// Definition-Instantiation rule
"let $a : $b = "                            "let $a : $b ; $a = "
"let $a = $*b ;"                            "let $a : type! ( $b ) ; $a = $b ;"

// For loop rule
"for ( $*a ; $*b ; $*c ) $~ $<${$}$> $>g"   "$a ; while ( $b ) { $g $c ; }"

// Compiler keyword rules
"import $*a ;"                              "package! ( $a ) ;"
"include $*a ;"                             "include! ( $a ) ;"
"link $*a ;"                                "link! ( $a ) ;"
"use $*a ;"                                 "use_rule! ( $a ) ;"

// NOT final, as we want people to build on these
