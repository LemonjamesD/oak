/*
Jordan Dehmel, 2023
GPLv3

Function signatures for ALL the integer
operators.

Abandon all hope, ye who enter here.
*/

link!("std/int_math.o");

// u8
let Add(self: u8, other: u8) -> u8;
let Sub(self: u8, other: u8) -> u8;
let Mult(self: u8, other: u8) -> u8;
let Div(self: u8, other: u8) -> u8;
let Mod(self: u8, other: u8) -> u8;
let Eq(self: u8, other: u8) -> bool;
let Neq(self: u8, other: u8) -> bool;
let Less(self: u8, other: u8) -> bool;
let Great(self: u8, other: u8) -> bool;
let Leq(self: u8, other: u8) -> bool;
let Greq(self: u8, other: u8) -> bool;
let And(self: u8, other: u8) -> u8;
let Or(self: u8, other: u8) -> u8;
let Lbs(self: u8, other: u8) -> u8;
let Rbs(self: u8, other: u8) -> u8;

let Incr(self: ^u8) -> u8;
let Decr(self: ^u8) -> u8;

let New(self: ^u8) -> void;
let Copy(self: ^u8, other: u8) -> u8;
let AddEq(self: ^u8, other: u8) -> u8;
let SubEq(self: ^u8, other: u8) -> u8;
let MultEq(self: ^u8, other: u8) -> u8;
let DivEq(self: ^u8, other: u8) -> u8;
let ModEq(self: ^u8, other: u8) -> u8;
let AndEq(self: ^u8, other: u8) -> u8;
let OrEq(self: ^u8, other: u8) -> u8;

// u16
let Add(self: u16, other: u16) -> u16;
let Sub(self: u16, other: u16) -> u16;
let Mult(self: u16, other: u16) -> u16;
let Div(self: u16, other: u16) -> u16;
let Mod(self: u16, other: u16) -> u16;
let Eq(self: u16, other: u16) -> bool;
let Neq(self: u16, other: u16) -> bool;
let Less(self: u16, other: u16) -> bool;
let Great(self: u16, other: u16) -> bool;
let Leq(self: u16, other: u16) -> bool;
let Greq(self: u16, other: u16) -> bool;
let And(self: u16, other: u16) -> u16;
let Or(self: u16, other: u16) -> u16;
let Lbs(self: u16, other: u16) -> u16;
let Rbs(self: u16, other: u16) -> u16;

let Incr(self: ^u16) -> u16;
let Decr(self: ^u16) -> u16;

let New(self: ^u16) -> void;
let Copy(self: ^u16, other: u16) -> u16;
let AddEq(self: ^u16, other: u16) -> u16;
let SubEq(self: ^u16, other: u16) -> u16;
let MultEq(self: ^u16, other: u16) -> u16;
let DivEq(self: ^u16, other: u16) -> u16;
let ModEq(self: ^u16, other: u16) -> u16;
let AndEq(self: ^u16, other: u16) -> u16;
let OrEq(self: ^u16, other: u16) -> u16;

// u32
let Add(self: u32, other: u32) -> u32;
let Sub(self: u32, other: u32) -> u32;
let Mult(self: u32, other: u32) -> u32;
let Div(self: u32, other: u32) -> u32;
let Mod(self: u32, other: u32) -> u32;
let Eq(self: u32, other: u32) -> bool;
let Neq(self: u32, other: u32) -> bool;
let Less(self: u32, other: u32) -> bool;
let Great(self: u32, other: u32) -> bool;
let Leq(self: u32, other: u32) -> bool;
let Greq(self: u32, other: u32) -> bool;
let And(self: u32, other: u32) -> u32;
let Or(self: u32, other: u32) -> u32;
let Lbs(self: u32, other: u32) -> u32;
let Rbs(self: u32, other: u32) -> u32;

let Incr(self: ^u32) -> u32;
let Decr(self: ^u32) -> u32;

let New(self: ^u32) -> void;
let Copy(self: ^u32, other: u32) -> u32;
let AddEq(self: ^u32, other: u32) -> u32;
let SubEq(self: ^u32, other: u32) -> u32;
let MultEq(self: ^u32, other: u32) -> u32;
let DivEq(self: ^u32, other: u32) -> u32;
let ModEq(self: ^u32, other: u32) -> u32;
let AndEq(self: ^u32, other: u32) -> u32;
let OrEq(self: ^u32, other: u32) -> u32;

// u64
let Add(self: u64, other: u64) -> u64;
let Sub(self: u64, other: u64) -> u64;
let Mult(self: u64, other: u64) -> u64;
let Div(self: u64, other: u64) -> u64;
let Mod(self: u64, other: u64) -> u64;
let Eq(self: u64, other: u64) -> bool;
let Neq(self: u64, other: u64) -> bool;
let Less(self: u64, other: u64) -> bool;
let Great(self: u64, other: u64) -> bool;
let Leq(self: u64, other: u64) -> bool;
let Greq(self: u64, other: u64) -> bool;
let And(self: u64, other: u64) -> u64;
let Or(self: u64, other: u64) -> u64;
let Lbs(self: u64, other: u64) -> u64;
let Rbs(self: u64, other: u64) -> u64;

let Incr(self: ^u64) -> u64;
let Decr(self: ^u64) -> u64;

let New(self: ^u64) -> void;
let Copy(self: ^u64, other: u64) -> u64;
let AddEq(self: ^u64, other: u64) -> u64;
let SubEq(self: ^u64, other: u64) -> u64;
let MultEq(self: ^u64, other: u64) -> u64;
let DivEq(self: ^u64, other: u64) -> u64;
let ModEq(self: ^u64, other: u64) -> u64;
let AndEq(self: ^u64, other: u64) -> u64;
let OrEq(self: ^u64, other: u64) -> u64;

// u128
let Add(self: u128, other: u128) -> u128;
let Sub(self: u128, other: u128) -> u128;
let Mult(self: u128, other: u128) -> u128;
let Div(self: u128, other: u128) -> u128;
let Mod(self: u128, other: u128) -> u128;
let Eq(self: u128, other: u128) -> bool;
let Neq(self: u128, other: u128) -> bool;
let Less(self: u128, other: u128) -> bool;
let Great(self: u128, other: u128) -> bool;
let Leq(self: u128, other: u128) -> bool;
let Greq(self: u128, other: u128) -> bool;
let And(self: u128, other: u128) -> u128;
let Or(self: u128, other: u128) -> u128;
let Lbs(self: u128, other: u128) -> u128;
let Rbs(self: u128, other: u128) -> u128;

let Incr(self: ^u128) -> u128;
let Decr(self: ^u128) -> u128;

let New(self: ^u128) -> void;
let Copy(self: ^u128, other: u128) -> u128;
let AddEq(self: ^u128, other: u128) -> u128;
let SubEq(self: ^u128, other: u128) -> u128;
let MultEq(self: ^u128, other: u128) -> u128;
let DivEq(self: ^u128, other: u128) -> u128;
let ModEq(self: ^u128, other: u128) -> u128;
let AndEq(self: ^u128, other: u128) -> u128;
let OrEq(self: ^u128, other: u128) -> u128;

// i8
let Add(self: i8, other: i8) -> i8;
let Sub(self: i8, other: i8) -> i8;
let Mult(self: i8, other: i8) -> i8;
let Div(self: i8, other: i8) -> i8;
let Mod(self: i8, other: i8) -> i8;
let Eq(self: i8, other: i8) -> bool;
let Neq(self: i8, other: i8) -> bool;
let Less(self: i8, other: i8) -> bool;
let Great(self: i8, other: i8) -> bool;
let Leq(self: i8, other: i8) -> bool;
let Greq(self: i8, other: i8) -> bool;
let And(self: i8, other: i8) -> i8;
let Or(self: i8, other: i8) -> i8;
let Lbs(self: i8, other: i8) -> i8;
let Rbs(self: i8, other: i8) -> i8;

let Incr(self: ^i8) -> i8;
let Decr(self: ^i8) -> i8;

let New(self: ^i8) -> void;
let Copy(self: ^i8, other: i8) -> i8;
let AddEq(self: ^i8, other: i8) -> i8;
let SubEq(self: ^i8, other: i8) -> i8;
let MultEq(self: ^i8, other: i8) -> i8;
let DivEq(self: ^i8, other: i8) -> i8;
let ModEq(self: ^i8, other: i8) -> i8;
let AndEq(self: ^i8, other: i8) -> i8;
let OrEq(self: ^i8, other: i8) -> i8;

// i16
let Add(self: i16, other: i16) -> i16;
let Sub(self: i16, other: i16) -> i16;
let Mult(self: i16, other: i16) -> i16;
let Div(self: i16, other: i16) -> i16;
let Mod(self: i16, other: i16) -> i16;
let Eq(self: i16, other: i16) -> bool;
let Neq(self: i16, other: i16) -> bool;
let Less(self: i16, other: i16) -> bool;
let Great(self: i16, other: i16) -> bool;
let Leq(self: i16, other: i16) -> bool;
let Greq(self: i16, other: i16) -> bool;
let And(self: i16, other: i16) -> i16;
let Or(self: i16, other: i16) -> i16;
let Lbs(self: i16, other: i16) -> i16;
let Rbs(self: i16, other: i16) -> i16;

let Incr(self: ^i16) -> i16;
let Decr(self: ^i16) -> i16;

let New(self: ^i16) -> void;
let Copy(self: ^i16, other: i16) -> i16;
let AddEq(self: ^i16, other: i16) -> i16;
let SubEq(self: ^i16, other: i16) -> i16;
let MultEq(self: ^i16, other: i16) -> i16;
let DivEq(self: ^i16, other: i16) -> i16;
let ModEq(self: ^i16, other: i16) -> i16;
let AndEq(self: ^i16, other: i16) -> i16;
let OrEq(self: ^i16, other: i16) -> i16;

// i32
let Add(self: i32, other: i32) -> i32;
let Sub(self: i32, other: i32) -> i32;
let Mult(self: i32, other: i32) -> i32;
let Div(self: i32, other: i32) -> i32;
let Mod(self: i32, other: i32) -> i32;
let Eq(self: i32, other: i32) -> bool;
let Neq(self: i32, other: i32) -> bool;
let Less(self: i32, other: i32) -> bool;
let Great(self: i32, other: i32) -> bool;
let Leq(self: i32, other: i32) -> bool;
let Greq(self: i32, other: i32) -> bool;
let And(self: i32, other: i32) -> i32;
let Or(self: i32, other: i32) -> i32;
let Lbs(self: i32, other: i32) -> i32;
let Rbs(self: i32, other: i32) -> i32;

let Incr(self: ^i32) -> i32;
let Decr(self: ^i32) -> i32;

let New(self: ^i32) -> void;
let Copy(self: ^i32, other: i32) -> i32;
let AddEq(self: ^i32, other: i32) -> i32;
let SubEq(self: ^i32, other: i32) -> i32;
let MultEq(self: ^i32, other: i32) -> i32;
let DivEq(self: ^i32, other: i32) -> i32;
let ModEq(self: ^i32, other: i32) -> i32;
let AndEq(self: ^i32, other: i32) -> i32;
let OrEq(self: ^i32, other: i32) -> i32;

// i64
let Add(self: i64, other: i64) -> i64;
let Sub(self: i64, other: i64) -> i64;
let Mult(self: i64, other: i64) -> i64;
let Div(self: i64, other: i64) -> i64;
let Mod(self: i64, other: i64) -> i64;
let Eq(self: i64, other: i64) -> bool;
let Neq(self: i64, other: i64) -> bool;
let Less(self: i64, other: i64) -> bool;
let Great(self: i64, other: i64) -> bool;
let Leq(self: i64, other: i64) -> bool;
let Greq(self: i64, other: i64) -> bool;
let And(self: i64, other: i64) -> i64;
let Or(self: i64, other: i64) -> i64;
let Lbs(self: i64, other: i64) -> i64;
let Rbs(self: i64, other: i64) -> i64;

let Incr(self: ^i64) -> i64;
let Decr(self: ^i64) -> i64;

let New(self: ^i64) -> void;
let Copy(self: ^i64, other: i64) -> i64;
let AddEq(self: ^i64, other: i64) -> i64;
let SubEq(self: ^i64, other: i64) -> i64;
let MultEq(self: ^i64, other: i64) -> i64;
let DivEq(self: ^i64, other: i64) -> i64;
let ModEq(self: ^i64, other: i64) -> i64;
let AndEq(self: ^i64, other: i64) -> i64;
let OrEq(self: ^i64, other: i64) -> i64;

// i128
let Add(self: i128, other: i128) -> i128;
let Sub(self: i128, other: i128) -> i128;
let Mult(self: i128, other: i128) -> i128;
let Div(self: i128, other: i128) -> i128;
let Mod(self: i128, other: i128) -> i128;
let Eq(self: i128, other: i128) -> bool;
let Neq(self: i128, other: i128) -> bool;
let Less(self: i128, other: i128) -> bool;
let Great(self: i128, other: i128) -> bool;
let Leq(self: i128, other: i128) -> bool;
let Greq(self: i128, other: i128) -> bool;
let And(self: i128, other: i128) -> i128;
let Or(self: i128, other: i128) -> i128;
let Lbs(self: i128, other: i128) -> i128;
let Rbs(self: i128, other: i128) -> i128;

let Incr(self: ^i128) -> i128;
let Decr(self: ^i128) -> i128;

let New(self: ^i128) -> void;
let Copy(self: ^i128, other: i128) -> i128;
let AddEq(self: ^i128, other: i128) -> i128;
let SubEq(self: ^i128, other: i128) -> i128;
let MultEq(self: ^i128, other: i128) -> i128;
let DivEq(self: ^i128, other: i128) -> i128;
let ModEq(self: ^i128, other: i128) -> i128;
let AndEq(self: ^i128, other: i128) -> i128;
let OrEq(self: ^i128, other: i128) -> i128;
