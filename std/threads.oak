/*
Jordan Dehmel, 2023

Basic Oak multithreading functions and
objects.

As of 0.0.10, mutex is experimental.
*/

link!("std/threads.o");

// Mutex
let mutex<t>: struct
{
    in_use: bool,
    data: t,
}

let wait_for_lock<t>(self: ^mutex<t>) -> void
{
    while (self.in_use)
    {
        ;
    }
}

let get_data<t>(self: ^mutex<t>, into: ^^t) -> bool
{
    let out: bool;
    if (self.in_use)
    {
        out = false;
    }
    else
    {
        out = true;

        self.in_use = true;
        ^into = @data;
    }

    out
}

let return_data<t>(self: ^mutex<t>, into: ^^t) -> void
{
    ^into = 0;
    self.in_use = false;
}

// Threads (experimental)
let thread: struct
{
    // C++ member padding; Don't mess with
    __a, __b, __c, __d: i128,
}

// Defined in C++
let New(self: ^thread) -> void;
let Del(self: ^thread) -> void;

let start(self: ^thread, to_do: ^() -> void) -> void;
let join(self: ^thread) -> void;
