let opt<t>: enum
{
    some: t,
    none: unit,
}
needs
{
    New<t>(self: ^opt<t>);
    Copy<t>(self: ^opt<t>, other: opt<t>);
}

let New<t>(self: ^opt<t>) -> void
{
    wrap_none(self);
}

let Copy<t>(self: ^opt<t>, other: opt<t>) -> void
{
    match (other)
    {
        case some(data)
        {
            wrap_some(self, ^data);
        }

        default
        {
            wrap_none(self);
        }
    }
}
