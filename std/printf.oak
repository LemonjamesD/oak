/*
Takes a format string and some number of
other things.

Any percentage sign % in the format string
will be replaced by the corrosponding thing.
Note that this does not use the C system
of types- a % will print whatever's next
no matter what.

For instance:

`Oak`:
```
package!("std");
use_rule!("std");

let main() -> i32
{
    let i: i32 = 123;
    let j: f64 = 1.234;

    printf!(
        "Variable i is %, j is %, and some text is '%'.\n",
        i,
        j,
        "some text here"
    );

    0
}

```

`Output`:
```
Variable i is 123, j is 1.234, and some text is 'some text here'.
```

You can escape this behaviour for a literal
% via the backslash.
*/
let printf!(argc: i32, argv: *str) -> i32
{
    package!("std");
    use_rule!("std");

    // It should be recursion-safe to use this rule here
    use_rule!("std");

    if (argc == 1)
    {
        print("print(");
        print(Get(@argv, 1));
        print(");\n");
    }
    else
    {
        let cur_char: i32 = 0;
        let cur_arg: i32 = 2;

        let is_valid: bool;

        // Iterate through
        for (let cur_char: i32 = 0; Get(Get(@argv, 1), cur_char) != to_i8(0); cur_char += 1)
        {
            let cur: i8 = Get(Get(@argv, 1), cur_char);

            if (cur == to_i8("%"))
            {
                if (cur_arg >= argc)
                {
                    print("print(__LINE__);\n");
                    print("print(\": MALFORMED PRINTF CALL\");\n");
                }
                else
                {
                    // Formatted print
                    print("print(");

                    // PRINT WITHOUT QUOTES
                    for (let i: i32 = 1; Get(Get(@argv, cur_arg), i); i += 1)
                    {
                        let other_cur: i8 = Get(Get(@argv, cur_arg), i);

                        print("print(");
                        print(other_cur);
                        print(");\n");
                    }

                    print(");\n");

                    cur_arg += 1;
                }
            }
            else if (cur == to_i8("\\"))
            {
                // Escape character

                if (Get(Get(@argv, 1), cur_char + 1) == to_i8(0))
                {
                    print("print(\"\\\\\");\n");
                }
                else
                {
                    if (Get(Get(@argv, 1), cur_char + 1) == to_i8("%"))
                    {
                        print("print(\"%\");\n");

                        cur_char += 1;
                    }
                    else
                    {
                        print("print(\"\\\\\");\n");
                    }
                }

                // If next is %, do not print the escape character. Otherwise, do.
            }
            else
            {
                // Print current character as literal
                print("print(\"");
                print(cur);
                print("\");\n");
            }
        }
    }

    0
}
