include!("std/arr.oak");
link!("std/files.o");

// An input file
let i_file: struct
{
    // Internals; Don't touch
    __a, __b, __c, __d: i128,
}

// An output file
let o_file: struct
{
    // Internals; Don't touch
    __a, __b, __c, __d: i128,
}

// Methods defined in C++
let New(self: ^i_file) -> void;
let New(self: ^o_file) -> void;

let Del(self: ^i_file) -> void;
let Del(self: ^o_file) -> void;

let open(self: ^i_file, name: str) -> void;
let open(self: ^o_file, name: str) -> void;

let close(self: ^i_file) -> void;
let close(self: ^o_file) -> void;

let read_char(self: ^i_file) -> i8;
let write_char(self: ^o_file, what: i8) -> void;

let tell(self: ^i_file) -> u128;
let tell(self: ^o_file) -> u128;

let seek(self: ^i_file, pos: u128) -> void; 
let seek(self: ^o_file, pos: u128) -> void;

// Defined in Oak
let read(self: ^i_file, size: u128) -> arr<i8>
{
    // Generic instantiations
    arr<i8>;
    New<i8>;
    Init<i8>;
    Del<i8>;
    Get<i8>;

    let out: arr<i8>;
    Init(@out, size);

    let buf: i8;
    buf = 0;

    let pos: u128;
    pos = 0;
    while (pos < size)
    {
        buf = read_char(self);
        Copy(Get(@out, pos), buf);

        pos += 1;
    }

    out
}

let write(self: ^o_file, data: ^arr<i8>) -> void
{
    // Generic instantiations
    arr<i8>;
    Get<i8>;

    let buf: i8;
    buf = 0;

    let pos: u128;
    pos = 0;
    while (pos < size)
    {
        buf = Get(arr, pos);
        write_char(self, buf);

        pos += 1;
    }
}
