/*
Jordan Dehmel, 2023
GPLv3

All of the floating-point operators. See
companion C++ file.
*/

link!("std/math_float_inter.o");

// Floats
let Add(self: f32, other: f32) -> f32;
let Sub(self: f32, other: f32) -> f32;
let Mult(self: f32, other: f32) -> f32;
let Div(self: f32, other: f32) -> f32;

let Eq(self: f32, other: f32) -> bool;
let Neq(self: f32, other: f32) -> bool;
let Less(self: f32, other: f32) -> bool;
let Great(self: f32, other: f32) -> bool;
let Leq(self: f32, other: f32) -> bool;
let Greq(self: f32, other: f32) -> bool;

let New(self: ^f32) -> void;

let Del(self: ^f32) -> void
{
}

let Copy(self: ^f32, other: f32) -> f32;
let AddEq(self: ^f32, other: f32) -> f32;
let SubEq(self: ^f32, other: f32) -> f32;
let MultEq(self: ^f32, other: f32) -> f32;
let DivEq(self: ^f32, other: f32) -> f32;

let Incr(self: ^f32) -> f32;
let Decr(self: ^f32) -> f32;

// Doubles
let Add(self: f64, other: f64) -> f64;
let Sub(self: f64, other: f64) -> f64;
let Mult(self: f64, other: f64) -> f64;
let Div(self: f64, other: f64) -> f64;

let Eq(self: f64, other: f64) -> bool;
let Neq(self: f64, other: f64) -> bool;
let Less(self: f64, other: f64) -> bool;
let Great(self: f64, other: f64) -> bool;
let Leq(self: f64, other: f64) -> bool;
let Greq(self: f64, other: f64) -> bool;

let New(self: ^f64) -> void;

let Del(self: ^f64) -> void
{
}

let Copy(self: ^f64, other: f64) -> f64;
let AddEq(self: ^f64, other: f64) -> f64;
let SubEq(self: ^f64, other: f64) -> f64;
let MultEq(self: ^f64, other: f64) -> f64;
let DivEq(self: ^f64, other: f64) -> f64;

let Incr(self: ^f64) -> f64;
let Decr(self: ^f64) -> f64;

// Long Doubles
let Add(self: f128, other: f128) -> f128;
let Sub(self: f128, other: f128) -> f128;
let Mult(self: f128, other: f128) -> f128;
let Div(self: f128, other: f128) -> f128;

let Eq(self: f128, other: f128) -> bool;
let Neq(self: f128, other: f128) -> bool;
let Less(self: f128, other: f128) -> bool;
let Great(self: f128, other: f128) -> bool;
let Leq(self: f128, other: f128) -> bool;
let Greq(self: f128, other: f128) -> bool;

let New(self: ^f128) -> void;

let Del(self: ^f128) -> void
{
}

let Copy(self: ^f128, other: f128) -> f128;
let AddEq(self: ^f128, other: f128) -> f128;
let SubEq(self: ^f128, other: f128) -> f128;
let MultEq(self: ^f128, other: f128) -> f128;
let DivEq(self: ^f128, other: f128) -> f128;

let Incr(self: ^f128) -> f128;
let Decr(self: ^f128) -> f128;

