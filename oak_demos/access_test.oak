// A test of array access [] in Oak.
// UNPASSED

// TODO: Implement pointer addition

package!("std");

new_rule!("access_begin", "[", ". . Get (");
new_rule!("access_end", "]", ")");
bundle_rule!("access", "access_begin", "access_end");

use_rule!("access");
use_rule!("std_method");

let wrapper: struct
{
    data: ^i32,
}

let New(self: ^wrapper) -> void
{
    print("Alloc called\n");
    alloc!(self.data, 10);
}

let Del(self: ^wrapper) -> void
{
    print("Free called\n");
    free_arr!(self.data);
}

let Get(self: ^wrapper, index: i32) -> ^i32
{
    //@(self.data + index)
    self.data +++ index
}

let main() -> i32
{
    let test: wrapper;
    Copy(test.data +++ 1, 5);

    print(^(test.data +++ 1));
    print("\n");

    Del(@test);

    0
}
