// For testing Oak's experimental SDL package
// Legacy passed

// Jordan Dehmel, 2023
package!("std");
use_rule!("std");

package!("sdl");

let main() -> i32
{
    sdl_init();

    let wind: sdl_window;

    Copy(@wind, to_u64(512), to_u64(512));

    let black: sdl_color;
    let white: sdl_color;
    white..New(to_u8(255), to_u8(255), to_u8(255), to_u8(255));

    let rect: sdl_rect;
    rect..New(to_u64(10), to_u64(10), to_u64(10), to_u64(10));

    let y: i32;
    y = 0;

    while (y < to_i32(wind.height))
    {
        let x: i32;
        x = 0;

        while (x < to_i32(wind.width))
        {
            rect.x = to_u64(x);
            rect.y = to_u64(y);

            wind..fill(black);
            wind..draw_rect(rect, white);

            wind..show();

            x += 10;
        }
    
        y += 10;

        let event: sdl_event;
        let flag: bool;

        flag = true;
        while (flag)
        {
            event = sdl_poll_event();

            match (event)
            {
                case sdl_none()
                {
                    flag = false;
                }

                default
                {
                    ;
                }
            }
        }
    }

    wind..Del();

    sdl_quit();

    let i: i32;
    i = 0;

    0
}
